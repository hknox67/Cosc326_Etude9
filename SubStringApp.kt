/**
Program which takes in an alphabet of any character or an int 1-26 and creates the longest unique string without repreating substring patterns.
Program uses 3 main variables, alphabet entered by user, array of two character long sequences used and the current longest string
of current user input. The process follows,
1. Get alphabet by converting user input into non-repeating alphabet from a-z
2. Start longest string with first letter of alphabet
3. Attempt to add an extra character onto longest string. If the sequence of the last character of longest string + character attempting to be added is not
contained within array sequences used we will add character to end of string and add sequence added to sequences used array. If the sequnece is already
inside the sequnces used array we loop through the alphabet attempting to add each letter to the end of the longest string.
4. If we cannot add any of the alphabet to the end of the current structure of longest string we remove the last character and attempt to add the alphabet
avoiding the character which lead us to an impossible pattern by incrementing starting char by one.
5. Repeat process 3 and 4 until longest string length is equal to value of alphabet_length^2+1

Uses import classes regex and math. We use regex.Pattern to pattern match the user input and distinguish between int and alphabet literal inputs.
Uses math.pow class to work out when max string has been reached with the value of alphabet_length^2+1.

 @Author Luka Didham
 @Author Hayden Knox
 @Author Ariana Van Lith
 @Author Connor Dobson
 @Author Akshay Menon
 */
import java.util.*
import java.util.regex.Pattern
import kotlin.math.pow

//Data field which keeps track of user entered alphabet
var alphabet: String = ""
//Array of sequences contained within current longest string
var sequencesUsed: ArrayList<String> = arrayListOf<String>()
//current longest string being built
var longestString: String = ""

/**
 * Main method which takes in user input and converts valid inputs to a valid alphabet of lowercase a-z characters.
 * Method calls and displays generateLongestString() method.
 */
fun main(){
    val sc = Scanner(System.`in`)
    println("Input Alphabet to be used or int between 1-26")
    while(sc.hasNextLine()) {
      //reset array
      sequencesUsed = arrayListOf<String>()
        val input: String = sc.nextLine()
        //regex attempting to match all non-number characters
        val letters = if (Pattern.matches("[^0-9]+", input)) {
          //check for blank spaces
          if(input.indexOf(" ")==-1) {
            input
          }else{
            println("Blank spaces detected. Please enter one complete word")
            null
          }
        }else {
            try {
              //attempt to read in int
                input.toInt()
            } catch (e: Exception) {
              println("Cannot convert input to int")
              null
            }
        }
        if(letters is Int){
          letters-1
            if(letters in 1..26){
                //reset alphabet
                alphabet = "abcdefghijklmnopqrstuvwxyz"
                //depending on entered int substrings ordered alphabet above
                alphabet = alphabet.substring(0,letters);
                //start string with first character of alphabet
                longestString = alphabet[0].toString()
                //prints longest string generated by generateLongestString() method intially passed 0 as is first call.
                println(generateLongestString(0))
            }else{
                if(letters>26){
                    println("Entered int $letters is longer than the English Alphabet. Int must be between 1-26")
            }else{
                    println("Entered int $letters is cannot be entered as is less than one")
                }
            }
        }else{
            if(letters is String) {
                //sets alphabet to user entered string
                alphabet = letters
                //removes duplicate letter chars A-Z -> a-z
                removeDuplicateChars()
                //starts string as first character of alphabet
                longestString = alphabet[0].toString()
                //prints longest string generated by generateLongestString() method intially passed 0 as is first call.
                println(generateLongestString(0))
            }else{
                println("Input cannot be converted to an Int or a String. Acceptable input is numbers 1-26 or letters a-z")
            }
        }

    }
}
/**
generateLongestString takes in a starting char and attempts to add char to the end of the longest
string. Will loop around alphabet attempting to add each character to end of string. If successful in adding
char will restart and attempt to add from start of alphabet. If not successful will remove last character of
longest string and increment startingChar to avoid infinite loops. Loops until longest string length is equal to
alphabet^2+1.
@param startingChar int which represents the starting char of the alphabet to avoid infinite loops
@return returns longest string when desired length is reached
 */
private fun generateLongestString(startingChar:Int): String{
  var x = startingChar
  var currentPair = ""
    while(x < alphabet.length){
      currentPair = ""
      currentPair += longestString[longestString.length - 1]
      currentPair += alphabet[x]
      if (!sequencesUsed.contains(currentPair)) {
        sequencesUsed.add(currentPair)
        longestString += alphabet[x]
        x=0
      }else{
        x++
      }
    }
  if (longestString.length != alphabet.length.toDouble().pow(2.0).toInt()+1) {
    currentPair = ""
    currentPair += longestString[longestString.length - 2]
    currentPair += longestString[longestString.length - 1]
    sequencesUsed.remove(currentPair)
    longestString = longestString.dropLast(1)

    if(startingChar<alphabet.length) {
      //Increment startingChar to avoid infinite loops
      return generateLongestString(startingChar + 1)
    }else{
      //When at the end of alphabet loop back to start
      return generateLongestString(0)
    }
  }else{
    //Sort array for easier testing
    sequencesUsed.sort()
    return longestString
  }

}
/**
Method modifies alphabet data field converting all A-Z characters -> a-z lowercase and removes all duplicate
characters.
 */
private fun removeDuplicateChars() {
    alphabet = alphabet.lowercase()
    var newAlphabet:String = ""
    for(element in alphabet){
        var c = element
        if(newAlphabet.indexOf(c)<0){
            newAlphabet += c
        }
    }
    alphabet = newAlphabet
}





